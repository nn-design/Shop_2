
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model Shop.Models.ProductCategoryUpdateVModel
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h4>商品分类编辑</h4>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">首页</a></li>
                    <li class="breadcrumb-item active">商品分类</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="card card-info">
                <!-- /.card-header -->
                <!-- form start -->
                <form class="form-horizontal">
                    <div class="card-body">
                        <div class="form-group row">
                            <label for="Name" class="col-sm-2 col-form-label">分类名称</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="Name" name="Name" placeholder="请输入分类名称" value="@Model.Category.Name">

                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="PID" class="col-sm-2 col-form-label">父级分类</label>

                            <div class="col-sm-10">
                                <select id="PID" name="PID"
                                        class="form-control select2 select2-hidden-accessible" style="width: 100%">
                                    <option value="0">请选择</option>
                                    @foreach (var item in Model.Categories)
                                    {
                                        <option value="@item.ID">@item.Name</option>
                                    }
                                </select>

                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="OrderNum" class="col-sm-2 col-form-label">排序号</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control" id="OrderNum" name="OrderNum" placeholder="请输入排序号" value="@Model.Category.OrderNum">

                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="Img" class="col-sm-2 col-form-label">分类图片</label>
                            <div class="col-sm-10">
                                <input type="file" name="Img" id="Img" />
                            </div>
                        </div>
                    </div>
                    <!-- /.card-body -->
                    <div class="card-footer">
                        <button type="button" id="btnSubmit" class="btn btn-primary">提交</button>
                        <a href="/ProductCategory/List" class="btn btn-default float-right">返回</a>
                    </div>
                    <!-- /.card-footer -->
                </form>
            </div>
            <!-- /.card -->
        </div>
    </div>
</section>

@section js{

    <script>

        //当文档加载完成后的回调函数
        $(function () {

            $("#PID").select2('val','@Model.Category.PID')//下拉框显示值

            //设置上传插件
            $('#Img').fileinput({
                language: 'zh',//设置语言
                allpwedFileExtensions: ['jpg', 'jpeg', 'png', 'gif'],//接收的文件后缀
                showUpload: false,
                browseClass: "btn btn-primary",
                dropZoneEnabled: false,

                //fileinput图片回显
                initialPreview: [
                    "<img src='/CategoryImages/@Model.Category.Img' class='file - preview - image' width=100>"
                ]
            });

            $("#btnSubmit").on("click", function () {
                //var ajaxData = { Name: $("#Name").val(), PID: $("#PID").val(), OrderNum: $("#OrderNum").val() };
                ////发起ajax请求
                //$.ajax({

                //    //指定请求地址
                //    url: "/ProductCategory/Add",
                //    //指定请求方式：GET、POST
                //    type: "POST",
                //    //期望服务端返回的数据格式(在回调函数中会自动将json串转化成js对象)
                //    dataType: "json",
                //    //向服务端发送的数据
                //    data: ajaxData,
                //    //当请求成功之后的回调函数，一般在接收服务端返回的数据
                //    // {"State":true}
                //    success: function (result) {//result参数代表服务端返回的数据

                //        alert(result.state)
                //        //alert(result.name)
                //        //alert(result.pid)
                //        //alert(result.ordernum)
                //    },
                //    //当请求失败之后的回调函数
                //    error: function (result) {//result参数代表服务端返回的数据

                //    }
                //})


                //ajax文件上传
                //FormData主要用来模拟一个表单对象，主要用于文件上传，可以存储键值对数据
                var formData = new FormData();

                formData.append("ID","@Model.Category.ID")//修改必须传主键

                formData.append("Name", $("#Name").val())
                formData.append("PID", $("#PID").val())
                formData.append("OrderNum", $("#OrderNum").val())
                formData.append("file", $("#Img")[0].files[0])
                formData.append("Img","@Model.Category.Img")


                $.ajax({

                    //指定请求地址
                    url: "/ProductCategory/Update",
                    //指定请求方式：GET、POST
                    type: "POST",
                    //期望服务端返回的数据格式(在回调函数中会自动将json串转化成js对象)
                    dataType: "json",
                    //向服务端发送的数据
                    data: formData,
                    // ajax传文件，一定要指定两个关键性的参数
                    contentType: false, // 不用任何编码，因为formdata对象自带编码
                    processData: false, // 告诉浏览器不要处理该数据
                    //当请求成功之后的回调函数，一般在接收服务端返回的数据
                    // {"State":true} (自动将json串转化成js对象，{State:true})
                    success: function (result) {//result参数代表服务端返回的数据
                        if (result.state) {

                            toastr.success("修改成功")
                        } else {

                            toastr.error("修改失败")
                        }
                        //alert(result.state)
                        //alert(result.name)
                        //alert(result.pid)
                        //alert(result.ordernum)
                    },
                    //当请求失败之后的回调函数
                    error: function (result) {//result参数代表服务端返回的数据
                        toastr.error("修改失败")
                    }
                })
            })
        })
    </script>


}
